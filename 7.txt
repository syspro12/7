1)****************************************************************************


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define newnode (struct node*)malloc(sizeof(struct node))

struct node
{
    char s[80];                                                                        
    struct node *next,*prev;
}*head=NULL;

char fname[40];                                                                    
int cnt=0;

void append(char st[80])                                                     
{
    struct node *p=NULL,*new=NULL;
    if(head==NULL)
    {
        head=newnode;
        strcpy(head->s,st);
        head->next=head->prev=NULL;                                    
    }
    else
    {
        for(p=head ; p->next ; p=p->next);                                 
        p->next=newnode;
        p->next->prev=p;
        p=p->next;
        strcpy(p->s,st);
        p->next=NULL;
    }
    ++cnt;                                                                          
}


void printline()
{
	struct node *p;
	 for(p=head;p;p=p->next)
         printf("%s\n",p->s); 
}

void delete(int pos1)                                                           
{
    int i;
    struct node *d=NULL,*p=NULL;
    //printf("befor CCCOOOUUNT ==> %d",cnt);
    if(pos1>cnt || pos1<0)
        printf("\n\n Error in d pos1=%d : enter correct order\n",pos1);
    else
    {
         if(pos1==1)                                                                  
         {
           d=head;
           head=head->next;
         }
         else
         {
         for(i=1,p=head; i<pos1-1 && p!=NULL; i++,p=p->next);       
         if(pos1!=cnt)
         {
            d=p->next;                                                                
            p->next=d->next;                                                    
            if(d->next!=NULL)
            d->next->prev=p;
            p->next=d->next;
         }
         else
         {
            d=p->next;                                                            
            p->next=NULL;
         }
        }
         free(d);
         --cnt;                                                                          
         printf("\nNode Deleted Successfully\n");
        //printf("\nbefor CCCOOOUUNT ==> %d\n",cnt);
    }
}


void load()                                                                                         
	FILE *fp;
	char buff[80];
	fp=fopen(fname,"r");
	if(fp==NULL)
	{
		printf("\nFile %s not found\n",fname);
		exit(0);
	}
	while(fgets(buff,80,fp)!=NULL)                                                    
	    append(buff);
	fclose(fp);
}


int main(int argc,char *argv[0])
{
    char cmd[10],str[80],c;
    FILE *fp;
    if(argc>1)
    {
        strcpy(fname,argv[1]);
        fp=fopen(fname,"r");
        if(fp==NULL)
        {
            fp=fopen(fname,"w+");
            fclose(fp);                                                                
            printf("\nFile %s is created.\n",fname);
        }
        else
            load();                                                                                
    }
    else
    {
        printf("Enter file name : ");                                          
        scanf("%s",fname);
        fp=fopen(fname,"r");
        if(fp==NULL)
        {
            fp=fopen(fname,"w+");
            fclose(fp);
            printf("\nFile %s is created.\n",fname);
        }
        else
            load();
    }
    do
    {
        int f=0,e=0,t=0;
        char p[80];
        printf("\n$ : ");
        fflush(stdin);
        gets(cmd);
        sscanf(cmd," %c %d %d %d",&c,&f,&e,&t);                         
        if(c=='f')
            sscanf(cmd," %c %c",&c,p);                                
        switch(c)
        {
            case 'A' :
            case 'a' :   printf("\t\tEnter the string . . .\n");
                            fflush(stdin);
                            gets(str);
                            while(strcmp(str,"exit"))
                            {
                                 append(str);                                               
                                 fflush(stdin);
                                 gets(str);
                            }break;

            case 'P' :
            case 'p' :   printline();                                     
                         break;
            
            case 'D' :
            
            case 'd' :     delete(f);                                                      
                           break;                                                   
            case 'H' :
            case 'h' :   printf("\na       : To Append.\np       : To Display entire link list.\nd n       : Delete at position\nh       : Help\ne       : To Exit.\n");
                        break;                                                                  
            
            case 'E' :
            case 'e' :   exit(0);                                                              
            
            default  :   printf("\nInvalid command..please use 'h' for help\n");
        }
    }while(c!='e');  
    return 0;
}



2)****************************************************************************


#include<stdio.h>
int n,nf;
int in[100];
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;

void getData()
{
    printf("\nEnter length of page reference sequence:");
    scanf("%d",&n);
    printf("\nEnter the page reference sequence:");
    for(i=0; i<n; i++)
        scanf("%d",&in[i]);
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}

void initialize()
{
    pgfaultcnt=0;
    for(i=0; i<nf; i++)
        p[i]=9999;
}

int isHit(int data)
{
    hit=0;
    for(j=0; j<nf; j++)
    {
        if(p[j]==data)
        {
            hit=1;
            break;
        }

    }

    return hit;
}

int getHitIndex(int data)
{
    int hitind;
    for(k=0; k<nf; k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}

void dispPages()
{
    for (k=0; k<nf; k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }

}

void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}

void fifo()
{
    initialize();
    for(i=0; i<n; i++)
    {
        printf("\nFor %d :",in[i]);

        if(isHit(in[i])==0)
        {

            for(k=0; k<nf-1; k++)
                p[k]=p[k+1];

            p[k]=in[i];
            pgfaultcnt++;
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
int main()
{
    int choice;
    while(1)
    {
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Exit\nEnter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
 
        default:
            return 0;
            break;
        }
    }
}

